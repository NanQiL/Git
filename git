一、基础命令
  mkdir 创建目录
  pwd 显示当前目录
  git init 把当前目录变成git可以管理的仓库
  git add+文件名 把文件添加到仓库
  git commit -m " 注释" 提交文件到仓库
总结：
  初始化一个Git仓库，使用git init命令。
  添加文件到Git仓库，分两步：
  使用命令git add <file>，注意，可反复多次使用，添加多个文件，git add是提交到暂存区；
  使用命令git commit -m <message>，完成，git commit是提交到分支。
二、要随时掌握工作区的状态，使用git status命令。
  如果git status告诉你有文件被修改过，用git diff可以查看修改内容 eg: git diff readme.txt
三、版本回退
  命令git log显示从最近到最远的提交日志，即历史记录
  如果嫌输出信息太多，看得眼花缭乱的，可以试试加上- -pretty=oneline参数，即git log --pretty=oneline
  将当前版本3回退到上一版本2:git reset --head HEAD^,cat <file>查看该文件内容。回退到第二个版本后还可以回退到第三版本，找到第三版本的commit id，使用git reset --hard id（id好写前几位）。
  找不到某个版本的commit id时可以采用git reflog
  用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
四、撤销修改
  当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
  当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了1，第二步按1操作。
  已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库
五、删除文件
  命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
六、添加远程仓库
  要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
  关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
  此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
七、从远程库克隆
  要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
  Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快
八、创建与合并分支
  查看分支：git branch
  创建分支：git branch <name>
  切换分支：git checkout <name>
  创建+切换分支：git checkout -b <name>
  合并某分支到当前分支：git merge <name>
  删除分支：git branch -d <name>
九、解决冲突
  当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
  解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
  用git log --graph命令可以看到分支合并图。
  合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
十、bug分支
  修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
  当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场
十一、Feature分支
  开发一个新feature，最好新建一个分支；
  如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
十二、多人协作分支
  查看远程库信息，使用git remote -v；
  本地新建的分支如果不推送到远程，对其他人就是不可见的；
  从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
  在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
  建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
  从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
  多人协作的工作模式：
  首先，可以试图用git push origin <branch-name>推送自己的修改；
  如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
  如果合并有冲突，则解决冲突，并在本地提交；
  没有冲突或者解决掉冲突后，再用git push origin <branch-namebranch推送就能成功！
  如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
十三、远程和本地分支
  关联本地和远程仓库git remote add origin git@github.com:michaelliao/learngit.git
  创建本地分支git branch dev1
  查看本地分支git branch
  将本地分支推送到远程分支git push -u origin dev1(把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。)
  切换到master分支，查看本地分支和远程分支git branch -a
  删除远程分支 git push origin --delete dev1
  删除本地分支git branch -d dev1
  删除远程仓库git remote rm origin
十四、Rebase
  rebase操作可以把本地未push的分叉提交历史整理成直线git rebase；
  rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。
十五、标签
1、创建标签
  命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
  命令git tag -a <tagname> -m "blablabla..."可以指定标签信息（-a指定标签名，-m指定说明）；
  命令git tag可以查看所有标签。
  命令git log --pretty=oneline --abbrev-commit查看历史commit id
  对某次提交打标签git tag <tagname> <commit id>
  命令git show <tagname>查看标签信息
2、操作标签
  命令git push origin <tagname>可以推送一个本地标签；
  命令git push origin --tags可以推送全部未推送过的本地标签；
  命令git tag -d <tagname>可以删除一个本地标签；
  命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
